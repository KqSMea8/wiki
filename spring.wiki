== IOC ==
==== BeanFactory & ApplicationContext ====
    可以认为 BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；而 ApplicationContext 面向Spring 框架的使用人员。
    
====== BeanFactory ======
下图是 XmlBeanFactory 的继承关系图
{{local:./images/spring/bean_fac.png}}
* ListableBeanFactory: 定义 bean 的一些基本信息，查看容器中bean 的信息。
* HierarchicalBeanFactory: 定义父子级联容器的接口。如 Spring MVC层bean的容器是 l
* ConfigurableBeanFactory: 配置 bean 容器的接口。增加 bean 容器的可定制性，如设置容器的类加载器，设置容器的初始化后处理器(BeanPostProcessor)，属性编辑器(PropertyEditorRegistrar)。
* AutowireCapableBeanFactory: 让 bean 容器具有 autowire 功能。
* SingletonBeanRegister: 可在运行期注册单实例 bean。
* BeanDefinitionRegister: 每个 xml 文件中的<bean>定义都对应一个 BeanDefinition 对象。 这个接口可以向容器中手工注册 bean。
* 通过 BeanFactory 初始化 IOC 容器时，并不会初始化 Bean，Bean 只有在第一次被调用到时才初始化。BeanFactory初始化时，必须提供一个日志框架，否则会报错。

====== ApplicationContext ======
**很多功能，在 BeanFactory 中需要以编程的方式实现，而在 ApplicationContext 中则可以通过配置的方式实现**
下图是 ApplicationContext 的继承关系}}
{{local:./images/spring/app_context.png}}
1. ApplicationEventPublisher: 让容器可以发布事件，如容器启动、关闭等。 实现了 ApplicationListener接口的 Bean 就可以基于事件做出相应。
2. MessageSource： 提供i18n 相关功能。
3. ResourcePatternResoulver: 所有 ApplicationContext 的实现类都实现了累死 PathMatcherResourcePatternResoulver的功能，可以通过带前缀的 Ant 风格的资源文件路径来装在配置文件。
* 构造 ApplicationContext 时，传入不带前缀的配置文件路径，具体使用的前缀会根据实现类不通而不同。(策略模式， ClassPathXmlApplicationContext -> classpath:     FileSystemXmlApplicationContext -> file:)
* 通过 ApplicationContext 初始化 IOC 容器，会初始化所有 singleton 的 bean，然后缓存之。 所以会有第一次惩罚的问题。

====== Bean lifecycle ======
实例化： Instantiate ->  Instantiation
<br>
=> (new instance,and set the properties)

初始化()： Initialize  ->  Initialization
<br>
=> 调用 init-method(初始化前 bean 已完备，属性已设置好。只是还没执行 init-method)

{{local:./images/spring/bean_lifecycle.png}}

可以将Bean 生命周期中的方法调用大致分为三类：
1. Bean 自身的方法：如 bean 的构造方法、setter 方法、init-method 和 destroy-method 等。（白色部分）
2. 2. Bean级接口方法：如 BeanNameAware、BeanFactoryAware、InitializingBean、DisposableBean。只作用在单个 Bean 上，由 Bean 直接实现这些接口。
3. 3. 容器级接口方法：有 InstantiationAwareBeanPostProcessor 和 BeanPostProcessor。一般成为『后处理器』。后处理器 bean 独立于用户
4. 自己定义的 bean，注册在容器中，对所有的 bean 产生作用。Spring 容器中可以注册多个后处理器，需要实现 core.Ordered接口来定义顺序。
5. 4. 例如： AbstractAdvisingBeanPostProcessor 是创建aop代理类的BPP，其中有 createProxy()方法 来创建bean的代理类。
6. 5. ApplicationContextAwareProcessor 是一个BPP，他会调用各种 Spring的Aware接口的钩子函数
7. 6. AbstractAutowireCapableBeanFactory.initializeBean() 会 invokeAwareMethods
_其中第2类方法不建议使用，因为用了以后bean 就和 Spring 框架强耦合了。而 第1类方法是通过配置文件形式耦合的，第三类方法是通过 Spring容器本身的功能，类似一个Spring 的一个插件，所以推荐使用_
_对于容器级别的后处理器。 BeanFactory 需要手动注入（调用addBeanPostProcessor方法,来自 ConfigurabaleBeanFactory接口），而 ApplicationContext 会自动识别处配置文件中定义的这些 BPP，然后将他们注册成容器的后处理器_




== AOP ==
    In plain English terms, AOP allows to specify “where” and “what”: where in your code you’d like to do what. “where” is called a “PointCut” (corresponding well to “crosscutting”). The combination of “where” and “what” is called an “Aspect”(do not know why it is named “Aspect”).
    
    {{local:./images/spring_aop_terminology.png ||style="width:550px;height:320px;"}}
====== 术语 ======
* *Join point*: 程序中客观存在的事物。如一个类有两个方法，它就有两个方法连接点
* *Pointcut*: selected join point which trigger the advice
* *Advice*: the code weaved to be execute.
* *Aspect*: pointcut + advice
* *Advisor*: 只有一个Advice的 Aspect(Spring 独有)
* *Introduction*: declaring additional methods or fields on behalf of a type. Spring AOP allows you to introduce new interfaces (and a corresponding implementation) to any advised object.
* *Weaving*: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.
* CGLIB or JDK动态代理 ：Spring aop 使用 JDK 动态代理还是使用 CGLIB 代理，规则是：
   * 若 class 有实现 interface，则使用 jdk 动态代理
   * 若 class 没有实现 interface，则使用 cglib 代理
   * 若要强制都使用 cglib 来动态代理，则需要配置属性: <aop:config proxy-target-class="true"/>

== Gotchas ==
    There are all kinds of "gotcha’s" that can occur with this type of under-the-covers implementation of which you should be aware
    
* [[http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-at-aspectj|Aspect can't advise other aspect]]
* 内部调用时，不会被代理。[[http://stackoverflow.com/questions/21625588/why-spring-aop-is-not-working-for-method-call-inside-another-method| why?]]  [[http://www.intertech.com/Blog/secrets-of-the-spring-aop-proxy/ | word aroud ]]
* cglib 的代理是用创建 target 的子类来实现的，so 它不能代理 final 和 private 的方法，因为他们不被继承。
* 编写 spring 配置文件时，对于 xsd 文件，最好[[http://stackoverflow.com/questions/20894695/spring-configuration-xml-schema-with-or-without-version | 不要加 version ]]
* 默认@Autowire是byType的，当某个bean（interface)有两个实现（Impl1，Impl2）时，这时候使用byType注入这个bean，就会抛错：except single matching bean but found two. 但是如果注入了两个这种bean，并且变量名和两个bean的名字相同，则会正常注入Impl1和Impl2
* @Autowire,@Qulifier VS. @Resource: 选择使用后者。
* <context:annotation-config> VS. <context:component-scan>
   * annotation-config 只会去本context找已经定义了的bean，然后注入。
   * component-scan 会去定义bean，也会去本context找已经定义了的bean。component-scan包含了auto-config
* static方法中要使用spring中的bean。[[http://stackoverflow.com/questions/17659875/autowired-and-static-method |方法一]] [[http://blog.jdevelop.eu/?p=154|方法二]]
